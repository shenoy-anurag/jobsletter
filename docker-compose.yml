services:
  redis:
    image: redis:7
    networks:
      - jobsletter

  db:
    image: postgres:17
    restart: no
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    # ports:
    #   - 5432:5432 # Only for alembic migrations locally. Remove when deploying.
    volumes:
      - jobsletter-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - jobsletter

  adminer:
    image: adminer
    restart: no
    ports:
      - 8080:8080
    networks:
      - jobsletter

  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    ports:
      - 8000:8000
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      - FIRST_SUPERUSER_FIRST_NAME=${FIRST_SUPERUSER_FIRST_NAME}
      - FIRST_SUPERUSER_LAST_NAME=${FIRST_SUPERUSER_LAST_NAME}
      - JWT_USER_FIRST_NAME=${JWT_USER_FIRST_NAME}
      - JWT_USER_LAST_NAME=${JWT_USER_LAST_NAME}
      - JWT_USER=${JWT_USER}
      - JWT_USER_PASSWORD=${JWT_USER_PASSWORD}
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TIME_ZONE=${TIME_ZONE}
      - SENTRY_DSN=${SENTRY_DSN}
    networks:
      - jobsletter
    depends_on:
      db:
        condition: service_healthy
      # redis:
      #   condition: service_healthy

  # worker:
  #   build: ./backend
  #   command: celery -A worker.celery worker --loglevel=info --logfile=logs/celery.log
  #   volumes:
  #     - ./project:/usr/src/app
  #   environment:
  #     - CELERY_BROKER_URL=redis://redis:6379/0
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/0
  #   depends_on:
  #     - backend
  #     - redis

volumes:
  jobsletter-db-data:

networks:
  jobsletter:
    name: jobsletter
    driver: bridge
